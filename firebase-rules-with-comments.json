{
  "rules": {
    ".read": false,
    ".write": false,
    "users": {
      "$userId": {
        // Allow users to read their own data
        ".read": "auth !== null && auth.uid === $userId",

        // Profile data
        "profile": {
          ".read": "auth !== null && auth.uid === $userId",
          ".write": "auth !== null && auth.uid === $userId",
          ".validate": "newData.hasChildren(['email', 'displayName', 'createdAt', 'lastLoginAt', 'status'])",
          "email": {
            ".validate": "newData.isString() && newData.val().matches(/^[^@]+@[^@]+\\.[^@]+$/)"
          },
          "displayName": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "createdAt": {
            ".validate": "newData.isNumber()"
          },
          "lastLoginAt": {
            ".validate": "newData.isNumber()"
          },
          "status": {
            ".validate": "newData.isString() && (newData.val() === 'active' || newData.val() === 'suspended' || newData.val() === 'inactive')"
          }
        },

        // Subscription data
        "subscription": {
          ".read": "auth !== null && auth.uid === $userId",
          ".write": "auth !== null && (auth.uid === $userId || root.child('admins').child(auth.uid).exists())",
          ".validate": "newData.hasChildren(['planType', 'status', 'startDate', 'endDate', 'renewalDate', 'paymentMethod', 'billingCycle'])",
          "planType": {
            ".validate": "newData.isString() && (newData.val() === 'free' || newData.val() === 'basic' || newData.val() === 'professional' || newData.val() === 'enterprise')"
          },
          "status": {
            ".validate": "newData.isString() && (newData.val() === 'active' || newData.val() === 'canceled' || newData.val() === 'expired' || newData.val() === 'trial')"
          },
          "startDate": {
            ".validate": "newData.isNumber()"
          },
          "endDate": {
            ".validate": "newData.isNumber()"
          },
          "renewalDate": {
            ".validate": "newData.isNumber()"
          },
          "paymentMethod": {
            ".validate": "newData.isString()"
          },
          "billingCycle": {
            ".validate": "newData.isString() && (newData.val() === 'monthly' || newData.val() === 'annual' || newData.val() === 'quarterly')"
          }
        },

        // Usage data
        "usage": {
          // Current period usage
          "currentPeriod": {
            ".read": "auth !== null && auth.uid === $userId",
            ".write": "auth !== null && (auth.uid === $userId || root.child('admins').child(auth.uid).exists())",
            ".validate": "newData.hasChildren(['transcriptionMinutes', 'translationWords', 'ttsMinutes', 'aiCredits', 'resetDate'])",
            "transcriptionMinutes": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "translationWords": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "ttsMinutes": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "aiCredits": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "resetDate": {
              ".validate": "newData.isNumber()"
            }
          },

          // Total usage
          "totalUsage": {
            ".read": "auth !== null && auth.uid === $userId",
            ".write": "auth !== null && (auth.uid === $userId || root.child('admins').child(auth.uid).exists())",
            ".validate": "newData.hasChildren(['transcriptionMinutes', 'translationWords', 'ttsMinutes', 'aiCredits'])",
            "transcriptionMinutes": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "translationWords": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "ttsMinutes": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "aiCredits": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            }
          }
        },

        // Billing data
        "billing": {
          "payAsYouGo": {
            ".read": "auth !== null && auth.uid === $userId",
            ".write": "auth !== null && (auth.uid === $userId || root.child('admins').child(auth.uid).exists())",
            "unitsRemaining": {
              ".validate": "newData.hasChildren(['transcriptionMinutes', 'translationWords', 'ttsMinutes', 'aiCredits'])",
              "transcriptionMinutes": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              },
              "translationWords": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              },
              "ttsMinutes": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              },
              "aiCredits": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              }
            },
            "purchaseHistory": {
              "$purchaseId": {
                ".validate": "newData.hasChildren(['date', 'amount', 'serviceType', 'unitsPurchased'])",
                "date": {
                  ".validate": "newData.isNumber()"
                },
                "amount": {
                  ".validate": "newData.isNumber() && newData.val() > 0"
                },
                "serviceType": {
                  ".validate": "newData.isString() && (newData.val() === 'transcription' || newData.val() === 'translation' || newData.val() === 'tts' || newData.val() === 'ai' || newData.val() === 'bundle')"
                },
                "unitsPurchased": {
                  ".validate": "newData.isNumber() && newData.val() > 0"
                }
              }
            }
          }
        }
      }
    },

    // Subscription plans collection
    "subscriptionPlans": {
      // Allow all authenticated users to read subscription plans
      ".read": "auth !== null",
      // Only allow admins to write to subscription plans
      ".write": "auth !== null && root.child('admins').child(auth.uid).exists()",

      "$planId": {
        ".validate": "newData.hasChildren(['id', 'name', 'price', 'isActive'])",
        "id": {
          ".validate": "newData.isString() && newData.val() === $planId"
        },
        "name": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "price": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "transcriptionMinutes": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "translationWords": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "ttsMinutes": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "aiCredits": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "credits": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "transcriptionModel": {
          ".validate": "newData.isString()"
        },
        "isActive": {
          ".validate": "newData.isBoolean()"
        },
        "requiresSubscription": {
          ".validate": "newData.isBoolean()"
        },
        "compatiblePlans": {
          // For arrays in Firebase, we validate that it has children
          ".validate": "newData.hasChildren()"
        }
      }
    },

    // Add index for transcripts collection
    "transcripts": {
      ".indexOn": ["timestamp"]
    }
  }
}
