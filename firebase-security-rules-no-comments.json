{
  "rules": {
    ".read": false,
    ".write": false,
    "users": {
      "$userId": {
        ".read": "auth !== null && auth.uid === $userId",
        "profile": {
          ".read": "auth !== null && auth.uid === $userId",
          ".write": "auth !== null && auth.uid === $userId",
          ".validate": "newData.hasChildren(['email', 'displayName', 'createdAt', 'lastLoginAt', 'status'])",
          "email": {
            ".validate": "newData.isString() && newData.val().matches(/^[^@]+@[^@]+\\.[^@]+$/)"
          },
          "displayName": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "createdAt": {
            ".validate": "newData.isNumber()"
          },
          "lastLoginAt": {
            ".validate": "newData.isNumber()"
          },
          "status": {
            ".validate": "newData.isString() && (newData.val() === 'active' || newData.val() === 'suspended' || newData.val() === 'inactive')"
          }
        },
        "subscription": {
          ".read": "auth !== null && auth.uid === $userId",
          ".write": "auth !== null && (auth.uid === $userId || root.child('admins').child(auth.uid).exists())",
          ".validate": "newData.hasChildren(['planType', 'status', 'startDate', 'endDate', 'renewalDate', 'paymentMethod', 'billingCycle'])",
          "planType": {
            ".validate": "newData.isString() && (newData.val() === 'free' || newData.val() === 'basic' || newData.val() === 'professional' || newData.val() === 'enterprise')"
          },
          "status": {
            ".validate": "newData.isString() && (newData.val() === 'active' || newData.val() === 'canceled' || newData.val() === 'expired' || newData.val() === 'trial')"
          },
          "startDate": {
            ".validate": "newData.isNumber()"
          },
          "endDate": {
            ".validate": "newData.isNumber()"
          },
          "renewalDate": {
            ".validate": "newData.isNumber()"
          },
          "paymentMethod": {
            ".validate": "newData.isString()"
          },
          "billingCycle": {
            ".validate": "newData.isString() && (newData.val() === 'monthly' || newData.val() === 'annual' || newData.val() === 'quarterly')"
          }
        },
        "usage": {
          ".read": "auth !== null && auth.uid === $userId",
          ".write": "auth !== null && root.child('admins').child(auth.uid).exists()",
          "currentPeriod": {
            ".validate": "newData.hasChildren(['transcriptionMinutes', 'translationWords', 'ttsMinutes', 'aiCredits', 'resetDate'])",
            "transcriptionMinutes": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "translationWords": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "ttsMinutes": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "aiCredits": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "resetDate": {
              ".validate": "newData.isNumber()"
            }
          },
          "totalUsage": {
            ".validate": "newData.hasChildren(['transcriptionMinutes', 'translationWords', 'ttsMinutes', 'aiCredits'])",
            "transcriptionMinutes": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "translationWords": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "ttsMinutes": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            },
            "aiCredits": {
              ".validate": "newData.isNumber() && newData.val() >= 0"
            }
          }
        },
        "billing": {
          ".read": "auth !== null && auth.uid === $userId",
          ".write": "auth !== null && root.child('admins').child(auth.uid).exists()",
          "payAsYouGo": {
            "unitsRemaining": {
              ".validate": "newData.hasChildren(['transcriptionMinutes', 'translationWords', 'ttsMinutes', 'aiCredits'])",
              "transcriptionMinutes": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              },
              "translationWords": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              },
              "ttsMinutes": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              },
              "aiCredits": {
                ".validate": "newData.isNumber() && newData.val() >= 0"
              }
            },
            "purchaseHistory": {
              "$purchaseId": {
                ".validate": "newData.hasChildren(['date', 'amount', 'serviceType', 'unitsPurchased'])",
                "date": {
                  ".validate": "newData.isNumber()"
                },
                "amount": {
                  ".validate": "newData.isNumber() && newData.val() > 0"
                },
                "serviceType": {
                  ".validate": "newData.isString() && (newData.val() === 'transcription' || newData.val() === 'translation' || newData.val() === 'tts' || newData.val() === 'ai' || newData.val() === 'bundle')"
                },
                "unitsPurchased": {
                  ".validate": "newData.isNumber() && newData.val() > 0"
                }
              }
            }
          },
          "paymentMethods": {
            "$methodId": {
              ".validate": "newData.hasChildren(['type', 'lastFour', 'expiryDate'])",
              "type": {
                ".validate": "newData.isString() && (newData.val() === 'credit' || newData.val() === 'debit' || newData.val() === 'paypal')"
              },
              "lastFour": {
                ".validate": "newData.isString() && newData.val().length === 4 && newData.val().matches(/^[0-9]{4}$/)"
              },
              "expiryDate": {
                ".validate": "newData.isString() && newData.val().matches(/^(0[1-9]|1[0-2])\\/[0-9]{2}$/)"
              },
              "isDefault": {
                ".validate": "newData.isBoolean()"
              }
            }
          },
          "invoices": {
            "$invoiceId": {
              ".validate": "newData.hasChildren(['date', 'amount', 'status', 'items'])",
              "date": {
                ".validate": "newData.isNumber()"
              },
              "amount": {
                ".validate": "newData.isNumber() && newData.val() > 0"
              },
              "status": {
                ".validate": "newData.isString() && (newData.val() === 'paid' || newData.val() === 'pending' || newData.val() === 'failed')"
              },
              "items": {
                "$itemId": {
                  ".validate": "newData.hasChildren(['description', 'amount'])",
                  "description": {
                    ".validate": "newData.isString()"
                  },
                  "amount": {
                    ".validate": "newData.isNumber() && newData.val() > 0"
                  }
                }
              }
            }
          }
        }
      }
    },
    "subscriptionPlans": {
      ".read": "auth !== null",
      ".write": "auth !== null && root.child('admins').child(auth.uid).exists()",
      "$planId": {
        ".validate": "newData.hasChildren(['id', 'name', 'price', 'isActive'])",
        "id": {
          ".validate": "newData.isString() && newData.val() === $planId"
        },
        "name": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "price": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "transcriptionMinutes": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "translationWords": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "ttsMinutes": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "aiCredits": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "credits": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        "transcriptionModel": {
          ".validate": "newData.isString()"
        },
        "isActive": {
          ".validate": "newData.isBoolean()"
        },
        "requiresSubscription": {
          ".validate": "newData.isBoolean()"
        },
        "compatiblePlans": {
          ".validate": "newData.hasChildren()"
        }
      }
    },
    "admins": {
      ".read": "auth !== null && root.child('admins').child(auth.uid).exists()",
      ".write": "auth !== null && root.child('admins').child(auth.uid).exists()",
      "$adminId": {
        ".validate": "newData.isBoolean() && newData.val() === true"
      }
    },
    "transcripts": {
      ".indexOn": ["timestamp", "user_email"],
      "$userId": {
        ".read": "auth !== null && auth.uid === $userId",
        ".write": "auth !== null && auth.uid === $userId"
      }
    },
    "transcriptions": {
      ".indexOn": ["timestamp", "user_email"],
      "$userId": {
        ".indexOn": "timestamp",
        ".read": "auth !== null && (auth.uid === $userId || root.child('admins').child(auth.uid).exists())",
        ".write": "auth !== null && (auth.uid === $userId || root.child('admins').child(auth.uid).exists())",
        "$transcriptionId": {
          ".validate": "newData.hasChildren(['user_email', 'text', 'language', 'model', 'timestamp'])",
          "user_email": {
            ".validate": "newData.isString() && newData.val().matches(/^[^@]+@[^@]+\\.[^@]+$/)"
          },
          "text": {
            ".validate": "newData.isString()"
          },
          "language": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "model": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "audio_duration": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "timestamp": {
            ".validate": "newData.isString()"
          }
        }
      }
    },
    "translations": {
      ".indexOn": ["timestamp", "user_email"],
      "$userId": {
        ".indexOn": "timestamp",
        ".read": "auth !== null && (auth.uid === $userId || root.child('admins').child(auth.uid).exists())",
        ".write": "auth !== null && (auth.uid === $userId || root.child('admins').child(auth.uid).exists())",
        "$translationId": {
          ".validate": "newData.hasChildren(['user_email', 'original_text', 'translated_text', 'source_language', 'target_language', 'model', 'timestamp'])",
          "user_email": {
            ".validate": "newData.isString() && newData.val().matches(/^[^@]+@[^@]+\\.[^@]+$/)"
          },
          "original_text": {
            ".validate": "newData.isString()"
          },
          "translated_text": {
            ".validate": "newData.isString()"
          },
          "source_language": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "target_language": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "model": {
            ".validate": "newData.isString() && newData.val().length > 0"
          },
          "timestamp": {
            ".validate": "newData.isString()"
          }
        }
      }
    },
    "user_activities": {
      ".indexOn": ["user_email", "timestamp"],
      ".read": "auth !== null && root.child('admins').child(auth.uid).exists()",
      ".write": "auth !== null",
      "$activityId": {
        ".validate": "newData.hasChildren(['user_email', 'activity_type', 'timestamp'])",
        "user_email": {
          ".validate": "newData.isString() && newData.val().matches(/^[^@]+@[^@]+\\.[^@]+$/)"
        },
        "activity_type": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        "details": {
          ".validate": "newData.isString()"
        },
        "timestamp": {
          ".validate": "newData.isString()"
        }
      }
    },
    "settings": {
      ".read": "auth !== null && root.child('admins').child(auth.uid).exists()",
      ".write": "auth !== null && root.child('admins').child(auth.uid).exists()"
    }
  }
}
